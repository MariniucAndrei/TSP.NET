//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace ApiService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ApiService.IAPI")]
    public interface IAPI
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Create", ReplyAction="http://tempuri.org/InterfaceAPI/CreateResponse")]
        System.Threading.Tasks.Task CreateAsync(string table, string name, string date, string path, string isDeleted, int idZone, int idGroup, int idEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/CreateNew", ReplyAction="http://tempuri.org/InterfaceAPI/CreateNewResponse")]
        System.Threading.Tasks.Task CreateNewAsync(string table, string name, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Read", ReplyAction="http://tempuri.org/InterfaceAPI/ReadResponse")]
        System.Threading.Tasks.Task<string> ReadAsync(string table);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Update", ReplyAction="http://tempuri.org/InterfaceAPI/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string name, string NewName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Delete", ReplyAction="http://tempuri.org/InterfaceAPI/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(string table, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Search", ReplyAction="http://tempuri.org/InterfaceAPI/SearchResponse")]
        System.Threading.Tasks.Task<string> SearchAsync(string table, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Filter", ReplyAction="http://tempuri.org/InterfaceAPI/FilterResponse")]
        System.Threading.Tasks.Task<string> FilterAsync(string name, string date, string path, string isDeleted, int idZone, int idGroup, int idEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceAPI/Save", ReplyAction="http://tempuri.org/InterfaceAPI/SaveResponse")]
        System.Threading.Tasks.Task SaveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IAPIChannel : ApiService.IAPI, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class APIClient : System.ServiceModel.ClientBase<ApiService.IAPI>, ApiService.IAPI
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public APIClient() : 
                base(APIClient.GetDefaultBinding(), APIClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IAPI.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), APIClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(APIClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public APIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task CreateAsync(string table, string name, string date, string path, string isDeleted, int idZone, int idGroup, int idEvent)
        {
            return base.Channel.CreateAsync(table, name, date, path, isDeleted, idZone, idGroup, idEvent);
        }
        
        public System.Threading.Tasks.Task CreateNewAsync(string table, string name, string id)
        {
            return base.Channel.CreateNewAsync(table, name, id);
        }
        
        public List<string> ReadAsync(string table)
        {
            return new List<string>();
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string name, string NewName)
        {
            return base.Channel.UpdateAsync(name, NewName);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(string table, string name)
        {
            return base.Channel.DeleteAsync(table, name);
        }
        
        public System.Threading.Tasks.Task<string> SearchAsync(string table, string name)
        {
            return base.Channel.SearchAsync(table, name);
        }
        
        public System.Threading.Tasks.Task<string> FilterAsync(string name, string date, string path, string isDeleted, int idZone, int idGroup, int idEvent)
        {
            return base.Channel.FilterAsync(name, date, path, isDeleted, idZone, idGroup, idEvent);
        }
        
        public System.Threading.Tasks.Task SaveAsync()
        {
            return base.Channel.SaveAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAPI))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IAPI))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return APIClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IAPI);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return APIClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IAPI);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IAPI,
        }
    }
}
